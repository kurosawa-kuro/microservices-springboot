server:
  port: 8080
spring:
  application:
    name: "accounts"
  datasource:
    hikari:
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      maximum-pool-size: 20
      minimum-idle: 5
      pool-name: KuroBankCP
  jpa:
    hibernate:
      jdbc:
        batch_size: 25
        batch_versioned_data: true
    show-sql: false
    properties:
      hibernate:
        query.in_clause_parameter_padding: true
        order_inserts: true
        order_updates: true
        jdbc.batch_size: 25
# 共通設定ここまで

---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    url: jdbc:sqlite:/data/app.db
    driverClassName: org.sqlite.JDBC
    username: ''
    password: ''
  jpa:
    database-platform: com.kurobytes.common.dialect.SQLiteDialect
    hibernate:
      ddl-auto: validate
    show-sql: false
# dev固有設定ここまで

---
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: jdbc:sqlite:/data/app.db
    driverClassName: org.sqlite.JDBC
    username: ''
    password: ''
  jpa:
    database-platform: com.kurobytes.common.dialect.SQLiteDialect
    hibernate:
      ddl-auto: none
    show-sql: false
# prod固有設定ここまで

management:
  endpoints:
    web:
      exposure:
        include: ["health", "info", "metrics"] # SECURITY: Only expose safe endpoints
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: false # SECURITY: Disable shutdown endpoint
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}


info:
  app:
    name: "accounts"
    description: "Kuro Bank Accounts Application"
    version: "1.0.0"

logging:
  level:
    com:
      kurobytes:
        accounts: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitRefreshPeriod: 5000
      limitForPeriod: 1
